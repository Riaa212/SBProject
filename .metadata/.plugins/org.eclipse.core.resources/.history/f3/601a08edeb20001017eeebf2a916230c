package com.example.admin.service.impl;

import java.time.LocalDateTime;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.example.admin.domain.UserEntity;
import com.example.admin.enums.RoleEnum;
import com.example.admin.proxy.UserProxy;
import com.example.admin.repository.UserRepo;
import com.example.admin.service.UserService;
import com.example.admin.utils.Helper;
import com.github.javafaker.Faker;

@Service
public class UserServiceImpl implements UserService
{
	
	@Autowired	
	private Helper helper;

	@Autowired
	private UserRepo userRepo;
	
	@Override
	public String registerUser(UserProxy user) {
		user.setRole(RoleEnum.User);
		UserEntity userObj = helper.convert(user, UserEntity.class);
		userRepo.save(helper.convert(user, UserEntity.class));
		return "user Register successfully..";
	}

	
	
	//save bluck of users
	public String saveBulkOfUsers(Integer noOfUsers) {

		for(int i=0;i<noOfUsers;i++)
		{
//			studentRepository.save(generateStudent());
			userRepo.save(generateUsers());
		}
		return null;
	}
	
	//generate users
	private UserEntity generateUsers()
	{
	LocalDateTime curreDateTime=LocalDateTime.now();
	Faker f=new Faker();
	UserEntity user=new UserEntity();
	user.setUserName(f.name().fullName());
	user.setEmail(f.name().firstName()+"@gmail.com");
	user.setDob(f.date().birthday());
	user.setRole(RoleEnum.User);
	user.setAddress(f.address().fullAddress());
	user.setPinCode(f.country().countryCode2());
	user.setMobileNumber(f.phoneNumber().phoneNumber());
	user.setUserImg(f.avatar().image());
	return user;
	}
	
	
	public String deleteAllUsers()
	{
	userRepo.deleteAll();
	return 	"deleted succssfully..";
	}
	
	@Override
	public Page<UserEntity> getAllusers(Integer pageNumber, Integer pageSize) {
//		List<UserEntity> userEntity = userRepo.findAll();
//		return helper.convertList(userEntity, UserProxy.class);
		Page<UserEntity> page = userRepo.findAll(PageRequest.of(pageNumber, pageSize));
		System.err.println("page===>"+page+"\nPage Number==>"+pageNumber+"\nPage Size==>"+pageSize);
		return page;
	}

	
	@Override
	public UserProxy getUserById(Integer userId) {
		Optional<UserEntity> byId = userRepo.findById(userId);
		if(byId.isPresent())
		{
		UserEntity userEntity = byId.get();	
		
		return helper.convert(userEntity, UserProxy.class);
		}
		return null;
	}

	@Override
	public UserProxy updateUserById(UserProxy user, Integer userid) {
		Optional<UserEntity> byId = userRepo.findById(userid);
		if(byId.isPresent())
		{
			UserEntity userEntity = byId.get();
			userEntity.setUserName(user.getUserName());
			userEntity.setEmail(user.getEmail());
			userEntity.setDob(user.getDob());
			userEntity.setGender(user.getGender());
			userEntity.setPinCode(user.getPinCode());
			userEntity.setAddress(user.getAddress());
			userRepo.save(userEntity);
			System.err.println(userEntity);
		}
		return user;
	}

	@Override
	public String deleteUserById(Integer id) {
		
		userRepo.deleteById(id);
		return "user deleted successfully";
	}

}
